#!/bin/sh

set -e

write_lxc_net()
{
    local i=$1
    cat >> /etc/default/lxc-net << EOF
# Leave USE_LXC_BRIDGE as "true" if you want to use lxcbr0 for your
# containers.  Set to "false" if you'll use virbr0 or another existing
# bridge, or mavlan to your host's NIC.
USE_LXC_BRIDGE="true"

# If you change the LXC_BRIDGE to something other than lxcbr0, then
# you will also need to update your /etc/lxc/default.conf as well as the
# configuration (/var/lib/lxc/<container>/config) for any containers
# already created using the default config to reflect the new bridge
# name.
# If you have the dnsmasq daemon installed, you'll also have to update
# /etc/dnsmasq.d/lxc and restart the system wide dnsmasq daemon.
LXC_BRIDGE="lxcbr0"
LXC_ADDR="10.0.$i.1"
LXC_NETMASK="255.255.255.0"
LXC_NETWORK="10.0.$i.0/24"
LXC_DHCP_RANGE="10.0.$i.2,10.0.$i.254"
LXC_DHCP_MAX="253"
# Uncomment the next line if you'd like to use a conf-file for the lxcbr0
# dnsmasq.  For instance, you can use 'dhcp-host=mail1,10.0.3.100' to have
# container 'mail1' always get ip address 10.0.3.100.
#LXC_DHCP_CONFILE=/etc/lxc/dnsmasq.conf

# Uncomment the next line if you want lxcbr0's dnsmasq to resolve the .lxc
# domain.  You can then add "server=/lxc/10.0.$i.1' (or your actual \$LXC_ADDR)
# to /etc/dnsmasq.conf, after which 'container1.lxc' will resolve on your
# host.
#LXC_DOMAIN="lxc"
EOF
}

configure_lxcbr0()
{
    local i=3
    cat > /etc/default/lxc-net << EOF
# This file is auto-generated by lxc.postinst if it does not
# exist.  Customizations will not be overridden.
EOF
    # if lxcbr0 exists, keep using the same network
    if  ip addr show lxcbr0 > /dev/null 2>&1 ; then
        i=`ip addr show lxcbr0 | grep "inet\>" | awk '{ print $2 }' | awk -F. '{ print $3 }'`
        write_lxc_net $i
        return
    fi
    # if no lxcbr0, find an open 10.0.a.0 network
    for l in `ip addr show | grep "inet\>" |awk '{ print $2 }' | grep '^10\.0\.' | sort -n`; do
            j=`echo $l | awk -F. '{ print $3 }'`
            if [ $j -gt $i ]; then
                write_lxc_net $i
                return
            fi
            i=$((j+1))
    done
    if [ $i -ne 254 ]; then
        write_lxc_net $i
    fi
}

migrate_auto()
{
    echo "Migrating /etc/lxc/auto to lxc.auto.start config flag"
    for container in /etc/lxc/auto/*; do
        [ "$container" = "/etc/lxc/auto/*" ] && continue

        if [ ! -L "$container" ]; then
            echo "$container isn't a symlink, skipping."
        fi

        if [ -d "$container" ] && [ -e "$container/config" ]; then
            echo " - Marking $container/config as auto-started"
            echo "" >> $container/config
            echo "# Added by lxc postinst, migration of autostart flag" >> $container/config
            echo "lxc.start.auto = 1" >> $container/config
        fi

        if [ -f "$container" ]; then
            echo " - Marking $container as auto-started"
            echo "" >> $container
            echo "# Added by lxc postinst, migration of autostart flag" >> $container
            echo "lxc.start.auto = 1" >> $container
        fi

        rm $container
    done

    # Try to remove /etc/lxc/auto (but ignore failure if non-empty)
    rmdir /etc/lxc/auto/ >/dev/null 2>&1 || true
}

case "${1}" in
    install|upgrade)
        if [ ! -f /etc/default/lxc-net ]; then
            configure_lxcbr0
        fi

        if [ -d /etc/lxc/auto ]; then
            migrate_auto
        fi

        if [ ! -f /etc/lxc/lxc-usernet ]; then
            mkdir -p /etc/lxc/
            echo "# USERNAME TYPE BRIDGE COUNT" > /etc/lxc/lxc-usernet
        fi
        ;;
    abort-upgrade)
        ;;
    *)
        echo "preinst called with unknown argument (${1})"
        exit 1
        ;;
esac

#DEBHELPER#

exit 0
